service:
  name: todo-api-template

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  stage: "${opt:stage, self:provider.stage}"
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: ap-southeast-1
  stackTags: ${file(tags.yml):${opt:stage}.stack}
  environment: ${file(env.yml):${self:custom.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.todoTable}"

functions:
  getTodo:
    handler: src/todo/handler.getTodo
    memorySize: 1024
    timeout: 30
    events:
    - http:
        method: get
        path: todo/{id}
        cors: true

  listTodos:
    handler: src/todo/handler.listTodos
    memorySize: 1024
    timeout: 30
    events:
    - http:
        method: get
        path: todo
        cors: true

  createTodo:
    handler: src/todo/handler.createTodo
    memorySize: 1024
    timeout: 60
    events:
    - http:
        method: post
        path: todo
        cors: true

  updateTodo:
    handler: src/todo/handler.updateTodo
    memorySize: 1024
    timeout: 60
    events:
    - http:
        method: put
        path: todo/{id}
        cors: true

  deleteTodo:
    handler: src/todo/handler.deleteTodo
    memorySize: 1024
    timeout: 60
    events:
    - http:
        method: delete
        path: todo/{id}
        cors: true

package:
  individually: true

resources:
  Resources: ${file(./serverless-resources-${opt:stage}.yml):Resources}
